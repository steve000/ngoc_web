<template>
    <div class="require-list">
        <div class="table-container">
            <div class="nav-top">
                <div class="search-container">
                    <search @searchValue="getSearchValue"
                            :isClear='isClear'
                            :showPlaceholder="'输入退货单号/供应商'"></search>
                </div>
            </div>
            <div class="search_result_container" v-if="searchItemValueArray.length>0">
                <search-result :searchItemValueArray="searchItemValueArray" :count="totalCount"
                               @deleteItem="getDeleteItem"></search-result>
            </div>
            <div class="table-wrapper" id="requireListTable">
                <el-table :data="requireList" border
                          :height="tableHeight"
                          ref="requireList"
                          :row-class-name="tableRowClassName">
                    <el-table-column label="退货单号" prop="purchaseReturnNo" min-width="170">
                        <template slot-scope="scope">
                            <div class="row-btn-show">
                                <div class="row-show" :title="scope.row.purchaseReturnNo"
                                     @click="viewrequireDetail(scope.row)">{{scope.row.purchaseReturnNo}}
                                </div>
                                <div class="operate-container">
                                    <el-button type="text" class="mr15"
                                               v-if="scope.row.status===0 && scope.row.approveStatus===1"
                                               @click="queryWaitStockOutProductFunction(scope.row)">出库
                                    </el-button>
                                    <div class="operate-container_div">
                                        <more-operating
                                            v-if="scope.row.status===0 && scope.row.approveStatus===0"
                                            @hide="getHide(scope.$index)"
                                            @onEdit="$router.push({ name:'purchaseReturnBillEdit', params: {seqNo: scope.row.seqNo}})"
                                            @onDelete="deleterequire(scope.row)"
                                            :row="scope.row">
                                        </more-operating>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </el-table-column>
                    <el-table-column label="单据状态" prop="status" min-width="110">
                        <template slot-scope="scope">
                            <!-- <el-select @change="changeStatus(scope.row)" v-model="scope.row.status" :disabled="scope.row.status === 1">
                                <el-option  :value='0' label='待发货'></el-option>
                                <el-option  :value='1' label='已完成'></el-option>
                            </el-select> -->
                            <div class="row-show" :title="scope.row.status">{{getStatus(scope.row.status)}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="审批状态" prop="approveStatus" min-width="110">
                        <template slot-scope='scope'>
                            <el-select @change="changeApproveStatus(scope.row)" v-model="scope.row.approveStatus" :disabled="scope.row.approveStatus === 1">
                                <el-option  :value='0' label='草稿'></el-option>
                                <el-option  :value='1' label='审批通过'></el-option>
                            </el-select>
                        </template>
                    </el-table-column>
                    <el-table-column label="退货金额" prop="totalAmount" min-width="110">
                        <template slot-scope="scope">
                            <div class="row-show" :title="scope.row.totalAmount">{{scope.row.totalAmount}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="实体" prop="userGroupName" min-width="110">
                        <template slot-scope="scope">
                            <div class="row-show" :title="scope.row.userGroupName">{{scope.row.userGroupName}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="供应商" prop="vendorName" min-width="110">
                        <template slot-scope="scope">
                            <div class="row-show" :title="scope.row.vendorName">{{scope.row.vendorName}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="合同编码" prop="contractNo" min-width="110">
                        <template slot-scope="scope">
                            <div class="row-show" :title="scope.row.contractNo">{{scope.row.contractNo}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="仓库名称" prop="storehouseName" min-width="140">
                        <template slot-scope="scope">
                            <div class="row-show" :title="scope.row.storehouseName">{{scope.row.storehouseName}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="仓库类型" prop="storehouseType" min-width="140">
                        <template slot-scope="scope">
                            <div class="row-show" :title="scope.row.storehouseType">{{getStoreType(scope.row.storehouseType)}}</div>
                        </template>
                    </el-table-column>
                    <el-table-column label="备注" prop="comments" min-width="130">
                        <template slot-scope="scope">
                            <div class="show-more"
                                 @click="showRemarkDialogVisible(scope.row.comments,scope.row.seqNo)">
                                <div class="show-more-content">
                                    {{scope.row.comments !== "" && scope.row.comments !== null ? scope.row.comments : '无'}}
                                </div>
                                <div class="show-more-icon">
                                    <el-button type="text">
                                        <i class="iconfont1 icon-bianji"></i>
                                    </el-button>
                                </div>
                            </div>
                        </template>
                    </el-table-column>
                    <div slot="empty" class="table_slot_empty_text">
                        <div><img src="../../../layouts/images/nodata.png"/></div>
                        <div>暂无数据</div>
                    </div>
                </el-table>
                <div class="pagination-section">
                    <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange"
                                   :current-page="param.pageNo" background
                                   :page-size="param.pageSize" layout="total, sizes, prev, pager, next, jumper"
                                   :total="totalCount">
                    </el-pagination>
                </div>
            </div>
        </div>
        <div class="model-container">
            <confirm-stock-in-modal
                v-if="isStockInDialogVisible"
                @save="confirmStockInSuccess"
                @close="isStockInDialogVisible=false"
                :row="row"></confirm-stock-in-modal>
            <modal title="修改备注"
                   v-model="isRemarkDialogVisible"
                   :showCancelButton="false"
                   width="660px">
                <div class="textarea-container">
                    <el-input
                        type="textarea"
                        :autosize="{ minRows: 6, maxRows: 6}"
                        placeholder="请输入内容"
                        v-model="remark"
                        @keyup.native="countRemark">
                    </el-input>
                    <p class="textarea-tips">200字以内</p>
                </div>
                <span slot="footer" class="dialog-footer">
                    <el-button @click="isRemarkDialogVisible = false">取 消</el-button>
                    <el-button type="primary" @click="updatepurchaseReturnBillFunction(remark)">确 定</el-button>
                </span>
            </modal>
        </div>
    </div>
</template>
<script>
    import {mapActions, mapState} from 'vuex';
    import TableHeightMixins from '~/mixins/tableheight';
    import Search from '~/components/common/Search';
    import MoreOperating from '~/components/common/MoreOperatingChannelPrice';
    import Modal from '~/components/common/Modal.vue';
    import PlatformMixins from '~/mixins/platform';
    import misc from '~/utils/misc';
    import ConfirmStockInModal from '~/components/common/ConfirmStockInModal.vue';
    import SearchResult from '~/components/common/SearchResult.vue';

    export default {
        name: 'purchaseReturnBillList',
        mixins: [TableHeightMixins, PlatformMixins],
        components: {
            Search, MoreOperating, Modal, ConfirmStockInModal, SearchResult
        },
        props: {operationId: Number, flag: String},
        data() {
            return {
                pendingDelivery: 0,
                completed: 0,
                draft: 0,
                approval: 0,
                param: {
                    pageSize: 10,
                    pageNo: 1,
                    status: -1,
                    approveStatus: -1,
                    searchKey: ""
                },
                queryrequireDetailsParam: {
                    requireNo: ""
                },
                updatepurchaseReturnBillArrivedTimeParam: {
                    requireNo: "",
                    planArrivalTime: "",
                },
                updatepurchaseReturnBillCommentParam: {
                    requireNo: "",
                    comment: "",
                },
                statusText: {
                    0: '待发货',
                    1: '已完成'
                },
                approveStatusText: {
                    0: '草稿',
                    1: '审批通过',
                },
                storehouseTypeText: {
                    1: '本地仓',
                    2: '中移物流仓'
                },
                deletepurchaseReturnBillParam: {
                    requireNo: "",
                    dataStatus: 2
                },
                isStockInDialogVisible: false,
                isRemarkDialogVisible: false,
                remark: "",
                pickerOptions: {
                    disabledDate(time) {
                        return time.getTime() < Date.now() - 8.64e7
                    },
                },
                requireList: [],
                totalCount: 0,
                buttonList: [],
                isResetDate: false,
                addSuccessType: false,
                row: {},
                searchItemValueArray: [],
                isClear: false
            }
        },
        watch: {
            flag: function (nval) {
                this.param.pageSize = 10;
                this.param.pageNo = 1;
                if (nval === '') {
                    this.param.status = -1;
                    this.param.approveStatus = -1;
                } else if (nval === '1') {
                    this.param.status = 0;
                    this.param.approveStatus = -1;
                } else if (nval === '2') {
                    this.param.status = 1;
                    this.param.approveStatus = -1;
                } else if (nval === '3') {
                    this.param.status = -1;
                    this.param.approveStatus = 0;
                } else if (nval === '4') {
                    this.param.status = -1;
                    this.param.approveStatus = 1;
                }
                this.addSuccessType = false;
                this.refreshPage();
            },
            operationId: function (val1,val2) {
                console.log(val1,val2,"123");
                this.refreshPage();
            }
        },
        computed: {
            ...mapState({}),
        },
        mounted() {
            this.refreshPage();
            this.setTableHeight(320);
        },
        methods: {
            ...mapActions([
                "purchaseReturnBillList", 
                "purchaseReturnBillChangeStatus",
                "purchaseReturnBillChangeApproveStatus",
                "purchaseReturnBillOutStock",
                "purchaseReturnBillDelete", 
                "showPageLoading", 
                "hidePageLoading",
            ]),
            handleSizeChange(nSize) {
                this.param.pageSize = nSize;
                this.refreshPage();
            },
            handleCurrentChange(nPage) {
                this.param.pageNo = nPage;
                this.refreshPage();
            },
            refreshPage(param = this.param) {
                this.showPageLoading();
                this.purchaseReturnBillListFunction(param);
            },
            initData() {
                this.getReset();
            },
            getSearchValue(searchValue) {
                this.param.pageSize = 10;
                this.param.pageNo = 1;
                this.isClear = false;
                this.param.searchKey = searchValue;
                this.searchItemValueArray = [searchValue];
                this.refreshPage();
            },
            purchaseReturnBillListFunction(param) {
                this.purchaseReturnBillList(param).then((resp) => {
                    this.hidePageLoading();
                    this.requireList = resp.result;
                    this.totalCount = resp.totalCount;
                    // var i=0,j=0,m=0,n=0;
                    // for (let iii = 0; iii < resp.result.length; iii++) {
                    //     if (resp.result[iii].status === 0) {
                    //         i++;
                    //     }
                    //     if (resp.result[iii].status === 1) {
                    //         j++;
                    //     }
                    //     if (resp.result[iii].approveStatus === 0) {
                    //         m++;
                    //     }
                    //     if (resp.result[iii].approveStatus === 1) {
                    //         n++;
                    //     }
                    // }
                    // this.pendingDelivery = i;
                    // this.completed = j;
                    // this.draft = m;
                    // this.approval = n;
                    // this.$emit("getStatisticsData",[this.pendingDelivery,this.completed,this.draft,this.approval]);
                    // console.log([this.pendingDelivery,this.completed,this.draft,this.approval],"69675785")
                }).catch((err) => {
                    this.requireList = [];
                    this.totalCount = 0;
                    this.hidePageLoading();
                });
            },
            getReset() {
                this.param.searchKey = "";
                this.isResetDate = true;
                this.refreshPage()
            },
            getDeleteItem(index){
                this.searchItemValueArray.splice(index);
                this.isClear = true;
                this.param.searchKey = "";
                this.refreshPage();
            },
            viewrequireDetail(row) {
                console.log(row,'312312')
                this.$router.push(`/purchase/purchaseReturnBill/details/${row.seqNo}`)
            },
            // update remark
            updatepurchaseReturnBillFunction(val) {
                this.requireList.comments = val;
                this.isRemarkDialogVisible = false;
                this.$message({
                    message: '修改备注成功',
                    type: 'success'
                });
                // this.refreshPage();
            },
            showRemarkDialogVisible(comment, requireNo) {
                this.remark = comment;
                this.isRemarkDialogVisible = true;
                this.updatepurchaseReturnBillCommentParam.requireNo = requireNo
            },
            returnClass(status, approveStatus) {
                if (status === 1 || status === 2) {//待收货和部分收货
                    return ' circle circle-FFA416'
                } else if (status === 3) {
                    return ' circle circle-8F9399'
                }
                if (approveStatus === 2) {
                    return ' circle circle-FFA416'
                } else if (approveStatus === 3 || approveStatus === 1) {
                    return ' circle circle-F66E6E'
                } else if (approveStatus === 4) {
                    return ' circle circle-8F9399'
                }
            },
            compareDate(planArrivalTime, status) {
                let nowDate = misc.formatDate(new Date(), 'yyyy-MM-dd');
                if (nowDate > planArrivalTime && status !== 3) {
                    return true
                }
                return false
            },
            countRemark(value) {
                if (this.remark.length > 200) {
                    this.remark = this.remark.slice(0, 200)
                }
            },
            getStatus(status) {
                return this.statusText[status]
            },
            getStoreType(type) {
                return this.storehouseTypeText[type]
            },
            // 出库操作
            queryWaitStockOutProductFunction(row) {
                console.log(row,"213");
                this.purchaseReturnBillOutStock({seqNo: row.seqNo, purchaseReturnNo: row.purchaseReturnNo}).then(res => {
                        console.log(res)
                        this.$message({
                            type: "success",
                            message: `退货单出库成功`
                        })
                        // 出库 数字变化
                        this.$emit("getStatisticsData", 'change');
                        this.refreshPage()    
                    })
            },
            // change单据状态
            changeStatus(row){
                console.log('变更单据状态',row.status)
                this.purchaseReturnBillChangeStatus({seqNo: row.seqNo, status: row.status}).then(res=>{
                    this.$message({
                        message: '单据状态修改成功',
                        type: 'success'
                    });
                    // 状态 数字变化
                    this.$emit("getStatisticsData", 'change');
                    this.refreshPage();
                })
            },
            // change审批状态
            changeApproveStatus(row){
                console.log('变更审核状态',row.approveStatus)
                this.purchaseReturnBillChangeApproveStatus({seqNo: row.seqNo, approveStatus: row.approveStatus}).then(res=>{
                    this.$message({
                        message: '审批状态修改成功',
                        type: 'success'
                    });
                    // 审批状态 数字变化
                    this.$emit("getStatisticsData", 'change');
                    this.refreshPage();
                })
            },
            tableRowClassName({row, rowIndex}) {
                if (rowIndex === 0 && this.addSuccessType === true) {
                    return 'success-row';
                }
            },
            confirmStockInSuccess() {
                this.isStockInDialogVisible = false;
                this.refreshPage();
            },
            // 更多操作
            getHide(index){
                let eleClassList = document.getElementById('requireListTable').getElementsByClassName('el-table')[0].getElementsByClassName('el-table__row')[index].classList;
                eleClassList.remove('success-row');
                let moreOperateClassList = document.getElementById('requireListTable').getElementsByClassName('el-table')[0].getElementsByClassName('el-table__row')[index].getElementsByClassName('operate-container_div')[0].classList;
                moreOperateClassList.remove('display-block');
            },
            // 删除退货单
            deleterequire(row) {
                let confirmType = `warning`
                let confirmText = `删除`
                this.$confirm(`确认${confirmText}选中的退货单？`, `${confirmText}退货单`, {
                    confirmButtonText: '确定',
                    type: confirmType
                }).then(() => {
                    this.purchaseReturnBillDelete({seqNo: row.seqNo, purchaseReturnNo: row.purchaseReturnNo}).then(res => {
                        console.log(res)
                        this.$message({
                            type: "success",
                            message: `${confirmText}退货单成功`
                        })
                        // 删除 数字变化
                        this.$emit("getStatisticsData", 'change');
                        this.refreshPage()    
                    })
                }).catch(() => {
                })
            },
        }
    }
</script>

<style lang="scss">
    .require-list {
        .table-container {
            padding-top: 20px;
            background-color: #fff;
            height: 100%;
            .nav-top {
                height: auto;
                justify-content: space-between;
                align-items: flex-start;
                .search-container {
                    width: 100%;
                }
                .select-date-container {
                    width: 100%;
                    margin-bottom: 20px;
                    margin-left: 14px;
                }
            }
            .table-wrapper {
                width: 100%;
                .el-table__body-wrapper tbody tr:hover {
                    .operate-container_div {
                        display: block;
                    }
                }
                .operate-container {
                    padding-right: 16px;
                    min-width: 72px;
                    font-size: 12px;
                    .operate-container_div {
                        display: none;
                    }
                    div {
                        float: right;
                    }
                }
            }
        }
        .display-flex {
            display: flex;
        }
        .icon-shijian {
            font-size: 12px;
        }
        .icon-bianji {
            font-size: 12px;
        }
        .model-container {
            height: auto;
        }
        .date-conatiner {
            &:hover {
                .date-edit-contaniner .date-picker-container {
                    display: block;
                }
                .date-edit-contaniner .date-edit {
                    display: block;
                }
            }
            .date-edit-contaniner {
                position: relative;
                text-align: right;
                .date-edit {
                    cursor: pointer;
                    position: absolute;
                    z-index: 9;
                    width: 20px;
                    display: none;
                }
                .date-picker-container {
                    opacity: 0;
                    position: absolute;
                    left: -88px;
                    z-index: 10;
                    width: 120px;
                    display: none;
                    .el-input--small .el-input__inner {
                        cursor: pointer;
                        border: none;
                    }
                    .el-input {
                        width: 120px;
                    }
                    .el-input__prefix {
                        display: none;
                    }
                }
            }
        }
        .show-more {
            display: flex;
            width: 100%;
            height: 44px;
            justify-content: space-between;
            position: relative;
            &:hover {
                .show-more-icon {
                    display: block;
                }
            }
            .show-more-content {
                white-space: nowrap;
                overflow: hidden;
                min-width: 108px;
                text-overflow: ellipsis;
            }
            .show-more-icon {
                min-width: 28px;
                font-size: 12px;
                position: absolute;
                right: 0px;
                display: none;
                z-index: 10;
            }
        }
        .font-color-F56C6C {
            color: #F56C6C;
        }
        .select-storehouse-container {
            margin-bottom: 12px;
            .el-input__inner {
                height: 34px;
                color: #666666;
                border: 1px solid #E0E0E0;
            }
            .el-form-item__label {
                font-size: 14px;
                color: #151515;
            }
        }
        .textarea-container {
            position: relative;
            .textarea-tips {
                color: #9c9c9c;
                position: absolute;
                top: 138px;
            }
        }

    }
</style>
